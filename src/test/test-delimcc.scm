
(import unittest aux (chicken sort))

(define-suite delimcc-suite

  ((test/letcc/delimcc _)
   #;(⊦= 10 (letshiftcc k 10))
   #;(⊦= 21 (+ 1 (* 2 (letshiftcc k (k (k 10))))))
   (⊦= 41 (+ 1 (resetcc (* 2 (letshiftcc k (k (k 10)))))))
   (⊦= 15 (+ 10 (resetcc (+ 2 3))))
   (⊦= 13 (+ 10 (resetcc (+ 2 (letshiftcc k 3)))))
   (⊦= 15 (+ 10 (resetcc (+ 2 (letshiftcc k (k 3))))))
   (⊦= 115 (+ 10 (resetcc (+ 2 (letshiftcc k (+ 100 (k 3)))))))
   (⊦= 117 (+ 10 (resetcc (+ 2 (letshiftcc k (+ 100 (k (k 3))))))))
   (⊦= 117 (resetcc (+ 10 (resetcc (+ 2 (letshiftcc k (+ 100 (k (k 3))))))))))

  ((test/letcc/delimcc+asai+tutorial _)
   ; Tests according to the tutorial at http://pllab.is.ocha.ac.jp/~asai/cw2011tutorial/main-e.pdf by Kenichi Asai.

   (⊦= 10 (resetcc (sub1 (+ 3 (letshiftcc k (* 5 2))))))
   (⊦= 9 (sub1 (resetcc (+ 3 (letshiftcc k (* 5 2))))))
   (⊦= 'hello (resetcc (sub1 (+ 3 (letshiftcc k 'hello)))))

   (define (prod lst)
     (cond
       ((null? lst) 1))
     ((zero? (car lst)) (delimcc-discard 'zero))
     (else (* (car lst) (prod (cdr lst)))))

   (⊦= 'zero (resetcc (prod '(2 3 0 5))))

   (define-resetcc f (sub1 (+ 3 (letshiftcc k k))))
   (⊦= 12 (f 10))

   (define-resetcc g (sub1 (+ 3 (delimcc-extract))))
   (⊦= 12 (g 10))

   (define (appender lst)
     (cond
       ((null? lst) (delimcc-extract))
       (else (cons (car lst) (appender (cdr lst))))))

   (define-resetcc A (appender '(1 2 3)))
   (⊦= '(1 2 3 4 5 6) (A '(4 5 6)))

   (define (walk f tree)
     (cond
       ((null? tree) (void))
       (else
         (walk f (car tree))
         (f (cadr tree))
         (walk f (caddr tree)))))

   (⊦= '(1 2 3) (§->list (resetcc+null (walk (lambda (v) (yield§ v)) '((() 1 ()) 2 (() 3 ()))))))

   (⊦= 600 (delimcc-foldr 100 ((each prod) (* each prod))
                            (walk delimcc-cons '((() 1 ()) 2 (() 3 ())))))

   (define-resetcc a (append (delimcc-τ '(hello)) '(world)))
   (⊦= '(hello world) (a))

   (define-resetcc p (append '(hello) (delimcc-lambda (x) (list x)) '(world)))
   (⊦= '(hello 4 world) (p 4))

   (⊦= '(1 3 3) (resetcc (delimcc-either `(1 ,(add1 2) 3))))

   (⊦= '(((p #t) (q #f))) 
         (let1 (sols '())
               (resetcc
                 (let ((p (delimcc-either '(#t #f)))
                       (q (delimcc-either '(#t #f))))
                   (when (and (or p q) (or p (not q)) (or (not p) (not q)))
                     (push! `((p ,p) (q ,q)) sols))))
               sols)))

  ((test/letcc/delimcc+yield _)
   (⊦= '(1) (resetcc+null (yield 1)))
   (⊦= '(1 2) (resetcc+null (yield 1) (yield 2))))

  ((test/letcc/delimcc+yield§ _)
   (⊦= '(1) (§->list (resetcc+null (yield§ 1))))
   (⊦= '(1 2) (§->list (resetcc+null (yield§ 1) (yield§ 2)))))

  ((test/letcc/delimcc+monad _)

   (define (reflect meaning) (letshiftcc k (extend k meaning)))
   (define (reify* t) (resetcc (eta (t))))
   (define (eta x) (list x))
   (define (extend f l) (apply append (map f l)))

   (define-syntax reify (syntax-rules () ((reify body ...) (reify* (τ body ...)))))
   (define-syntax amb (syntax-rules () ((amb v ...) (reflect (append (reify v) ...)))))

   (⊦= '(1 2 3) (reify (amb 1 2 3)))
   (⊦= '(8 9 9 10) (reify (+ (amb 1 2) 3 (amb 4 5))))
   (⊦= '(31 51) (reify (+ 1 (letcc k (* 10 (amb 3 (k 4)))))))

   (define (www)
     (define (f x) (+ x (amb 6 4 2 8) (amb 2 4 5 4 1)))
     (reify (f (f (amb 0 2 3 4 5 32)))))

   (⊦= '(16 18 19 18 15 14 16 17 16 13 12 14 15 14 11 18 20 21 20 17 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 19 21 22 21 18 17 19 20 19 16 15 17 18 17 14 21 23 24 23 20 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 15 17 18 17 14 13 15 16 15 12 11 13 14 13 10 17 19 20 19 16 14 16 17 16 13 12 14 15 14 11 10 12 13 12 9 16 18 19 18 15 16 18 19 18 15 14 16 17 16 13 12 14 15 14 11 18 20 21 20 17 17 19 20 19 16 15 17 18 17 14 13 15 16 15 12 19 21 22 21 18 16 18 19 18 15 14 16 17 16 13 12 14 15 14 11 18 20 21 20 17 13 15 16 15 12 11 13 14 13 10 9 11 12 11 8 15 17 18 17 14 12 14 15 14 11 10 12 13 12 9 8 10 11 10 7 14 16 17 16 13 14 16 17 16 13 12 14 15 14 11 10 12 13 12 9 16 18 19 18 15 15 17 18 17 14 13 15 16 15 12 11 13 14 13 10 17 19 20 19 16 14 16 17 16 13 12 14 15 14 11 10 12 13 12 9 16 18 19 18 15 11 13 14 13 10 9 11 12 11 8 7 9 10 9 6 13 15 16 15 12 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 21 23 24 23 20 19 21 22 21 18 17 19 20 19 16 23 25 26 25 22 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 17 19 20 19 16 15 17 18 17 14 13 15 16 15 12 19 21 22 21 18 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 21 23 24 23 20 19 21 22 21 18 17 19 20 19 16 23 25 26 25 22 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 17 19 20 19 16 15 17 18 17 14 13 15 16 15 12 19 21 22 21 18 16 18 19 18 15 14 16 17 16 13 12 14 15 14 11 18 20 21 20 17 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 19 21 22 21 18 17 19 20 19 16 15 17 18 17 14 21 23 24 23 20 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 15 17 18 17 14 13 15 16 15 12 11 13 14 13 10 17 19 20 19 16 14 16 17 16 13 12 14 15 14 11 10 12 13 12 9 16 18 19 18 15 16 18 19 18 15 14 16 17 16 13 12 14 15 14 11 18 20 21 20 17 17 19 20 19 16 15 17 18 17 14 13 15 16 15 12 19 21 22 21 18 16 18 19 18 15 14 16 17 16 13 12 14 15 14 11 18 20 21 20 17 13 15 16 15 12 11 13 14 13 10 9 11 12 11 8 15 17 18 17 14 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 22 24 25 24 21 20 22 23 22 19 18 20 21 20 17 24 26 27 26 23 23 25 26 25 22 21 23 24 23 20 19 21 22 21 18 25 27 28 27 24 22 24 25 24 21 20 22 23 22 19 18 20 21 20 17 24 26 27 26 23 19 21 22 21 18 17 19 20 19 16 15 17 18 17 14 21 23 24 23 20 19 21 22 21 18 17 19 20 19 16 15 17 18 17 14 21 23 24 23 20 21 23 24 23 20 19 21 22 21 18 17 19 20 19 16 23 25 26 25 22 22 24 25 24 21 20 22 23 22 19 18 20 21 20 17 24 26 27 26 23 21 23 24 23 20 19 21 22 21 18 17 19 20 19 16 23 25 26 25 22 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 17 19 20 19 16 15 17 18 17 14 13 15 16 15 12 19 21 22 21 18 19 21 22 21 18 17 19 20 19 16 15 17 18 17 14 21 23 24 23 20 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 19 21 22 21 18 17 19 20 19 16 15 17 18 17 14 21 23 24 23 20 16 18 19 18 15 14 16 17 16 13 12 14 15 14 11 18 20 21 20 17 15 17 18 17 14 13 15 16 15 12 11 13 14 13 10 17 19 20 19 16 17 19 20 19 16 15 17 18 17 14 13 15 16 15 12 19 21 22 21 18 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 17 19 20 19 16 15 17 18 17 14 13 15 16 15 12 19 21 22 21 18 14 16 17 16 13 12 14 15 14 11 10 12 13 12 9 16 18 19 18 15 21 23 24 23 20 19 21 22 21 18 17 19 20 19 16 23 25 26 25 22 23 25 26 25 22 21 23 24 23 20 19 21 22 21 18 25 27 28 27 24 24 26 27 26 23 22 24 25 24 21 20 22 23 22 19 26 28 29 28 25 23 25 26 25 22 21 23 24 23 20 19 21 22 21 18 25 27 28 27 24 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 22 24 25 24 21 20 22 23 22 19 18 20 21 20 17 24 26 27 26 23 23 25 26 25 22 21 23 24 23 20 19 21 22 21 18 25 27 28 27 24 22 24 25 24 21 20 22 23 22 19 18 20 21 20 17 24 26 27 26 23 19 21 22 21 18 17 19 20 19 16 15 17 18 17 14 21 23 24 23 20 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 21 23 24 23 20 19 21 22 21 18 17 19 20 19 16 23 25 26 25 22 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 17 19 20 19 16 15 17 18 17 14 13 15 16 15 12 19 21 22 21 18 16 18 19 18 15 14 16 17 16 13 12 14 15 14 11 18 20 21 20 17 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 19 21 22 21 18 17 19 20 19 16 15 17 18 17 14 21 23 24 23 20 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 15 17 18 17 14 13 15 16 15 12 11 13 14 13 10 17 19 20 19 16 22 24 25 24 21 20 22 23 22 19 18 20 21 20 17 24 26 27 26 23 24 26 27 26 23 22 24 25 24 21 20 22 23 22 19 26 28 29 28 25 25 27 28 27 24 23 25 26 25 22 21 23 24 23 20 27 29 30 29 26 24 26 27 26 23 22 24 25 24 21 20 22 23 22 19 26 28 29 28 25 21 23 24 23 20 19 21 22 21 18 17 19 20 19 16 23 25 26 25 22 21 23 24 23 20 19 21 22 21 18 17 19 20 19 16 23 25 26 25 22 23 25 26 25 22 21 23 24 23 20 19 21 22 21 18 25 27 28 27 24 24 26 27 26 23 22 24 25 24 21 20 22 23 22 19 26 28 29 28 25 23 25 26 25 22 21 23 24 23 20 19 21 22 21 18 25 27 28 27 24 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 19 21 22 21 18 17 19 20 19 16 15 17 18 17 14 21 23 24 23 20 21 23 24 23 20 19 21 22 21 18 17 19 20 19 16 23 25 26 25 22 22 24 25 24 21 20 22 23 22 19 18 20 21 20 17 24 26 27 26 23 21 23 24 23 20 19 21 22 21 18 17 19 20 19 16 23 25 26 25 22 18 20 21 20 17 16 18 19 18 15 14 16 17 16 13 20 22 23 22 19 17 19 20 19 16 15 17 18 17 14 13 15 16 15 12 19 21 22 21 18 19 21 22 21 18 17 19 20 19 16 15 17 18 17 14 21 23 24 23 20 20 22 23 22 19 18 20 21 20 17 16 18 19 18 15 22 24 25 24 21 19 21 22 21 18 17 19 20 19 16 15 17 18 17 14 21 23 24 23 20 16 18 19 18 15 14 16 17 16 13 12 14 15 14 11 18 20 21 20 17 23 25 26 25 22 21 23 24 23 20 19 21 22 21 18 25 27 28 27 24 25 27 28 27 24 23 25 26 25 22 21 23 24 23 20 27 29 30 29 26 26 28 29 28 25 24 26 27 26 23 22 24 25 24 21 28 30 31 30 27 25 27 28 27 24 23 25 26 25 22 21 23 24 23 20 27 29 30 29 26 22 24 25 24 21 20 22 23 22 19 18 20 21 20 17 24 26 27 26 23 48 50 51 50 47 46 48 49 48 45 44 46 47 46 43 50 52 53 52 49 50 52 53 52 49 48 50 51 50 47 46 48 49 48 45 52 54 55 54 51 51 53 54 53 50 49 51 52 51 48 47 49 50 49 46 53 55 56 55 52 50 52 53 52 49 48 50 51 50 47 46 48 49 48 45 52 54 55 54 51 47 49 50 49 46 45 47 48 47 44 43 45 46 45 42 49 51 52 51 48 46 48 49 48 45 44 46 47 46 43 42 44 45 44 41 48 50 51 50 47 48 50 51 50 47 46 48 49 48 45 44 46 47 46 43 50 52 53 52 49 49 51 52 51 48 47 49 50 49 46 45 47 48 47 44 51 53 54 53 50 48 50 51 50 47 46 48 49 48 45 44 46 47 46 43 50 52 53 52 49 45 47 48 47 44 43 45 46 45 42 41 43 44 43 40 47 49 50 49 46 44 46 47 46 43 42 44 45 44 41 40 42 43 42 39 46 48 49 48 45 46 48 49 48 45 44 46 47 46 43 42 44 45 44 41 48 50 51 50 47 47 49 50 49 46 45 47 48 47 44 43 45 46 45 42 49 51 52 51 48 46 48 49 48 45 44 46 47 46 43 42 44 45 44 41 48 50 51 50 47 43 45 46 45 42 41 43 44 43 40 39 41 42 41 38 45 47 48 47 44 50 52 53 52 49 48 50 51 50 47 46 48 49 48 45 52 54 55 54 51 52 54 55 54 51 50 52 53 52 49 48 50 51 50 47 54 56 57 56 53 53 55 56 55 52 51 53 54 53 50 49 51 52 51 48 55 57 58 57 54 52 54 55 54 51 50 52 53 52 49 48 50 51 50 47 54 56 57 56 53 49 51 52 51 48 47 49 50 49 46 45 47 48 47 44 51 53 54 53 50) 
         (www))

   (define (wwww)
     (define (f x) (+ x (amb 6 4 2 8) (amb 2 4 5 4 1)))
     (reify (f (f (f (amb 0 2 3 4 5 32))))))

   (⊦= 48000 (length (wwww)))

   )


  )

(unittest/✓ delimcc-suite)

