
(import unittest aux (chicken sort))

(define-suite letnondeterministic-suite

  ((test/letnondeterministic/choose-null? _)
   (⊦= '() (letnondeterministic (? ¿ ⊦ • !) (? '()))))

  ((test/letnondeterministic/choose _)
   (⊦= '(1 2 3) (letnondeterministic (? ¿ ⊦ • !) (? '(1 2 3)))))

  ((test/letnondeterministic/choose§ _)
   (⊦= '(1 2 3) (letnondeterministic (? ¿ ⊦ • !) (? (cons§ 1 (cons§ 2 (cons§ 3 '())))))))

  ((test/letnondeterministic/choose-rec _)
   (⊦= '(0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584)
         (§->list
           (stop§ (λ (v) (> v 3000))
                   (letnondeterministic§ (? ¿ ⊦ • !) (? (fibs§ 0 1)))))))

  ((test/letnondeterministic/choose+nested _)
   (⊦= '(1 4 3 1 5 3) (letnondeterministic (? ¿ ⊦ • !) (? `(1 ,(? '(4 5)) 3)))))

  ((test/letnondeterministic/choose+nested+¿ _)
   (⊦= '(1 4 3 1 5 3) (letnondeterministic (? ¿ ⊦ • !) (? `(1 ,(¿ '(4 5)) 3)))))

  ((test/letnondeterministic/choose+double _)
   (⊦= '(5 6 6 7 7 8) (letnondeterministic (? ¿ ⊦ • !) (+ (? '(1 2 3)) (? '(4 5))))))

  ((test/letnondeterministic/choose+fair+fibs _)
   (⊦= '((a 0)
           (b 0)
           (c 0)
           (a 1)
           (b 1)
           (c 1)
           (a 1)
           (b 1)
           (c 1)
           (a 2)
           (b 2)
           (c 2)
           (a 3)
           (b 3)
           (c 3)
           (a 5)
           (b 5)
           (c 5)
           (a 8)
           (b 8)
           (c 8)) 
         (letnondeterministic 21 (? ¿ ⊦ • !)
                              (? (interleave§
                                   (map§ (lambda (v) (list 'a v)) (fibs§ 0 1)) 
                                   (map§ (lambda (v) (list 'b v)) (fibs§ 0 1))
                                   (map§ (lambda (v) (list 'c v)) (fibs§ 0 1)))))))

  ((test/letnondeterministic/choose+fair _)
   (⊦= '((a 1) (b 1) (a 2) (b 2) (a 3)) (letnondeterministic (? ¿ ⊦ • !) (? (interleave§ '((a 1) (a 2) (a 3)) '((b 1) (b 2)))))))

  ((test/letnondeterministic/odd _)
   (⊦= '(1 3)
         (letnondeterministic (? ¿ ⊦ • !)
                              (let1 (v (? '(1 2 3))) 
                                    (⊦ (odd? v)) 
                                    v))))

  ((test/letnondeterministic/parlor _)

   (⊦= '((1 1 5)
           (1 2 4)
           (1 3 3)
           (1 4 2)
           (1 5 1)
           (2 1 4)
           (2 2 3)
           (2 3 2)
           (2 4 1)
           (3 1 3)
           (3 2 2)
           (3 3 1)
           (4 1 2)
           (4 2 1)
           (5 1 1)) (letnondeterministic (? ¿ ⊦ • !)

                                         (define (two-numbers)
                                           (list (? '(1 2 3 4 5)) (? '(1 2 3 4 5)) (? '(1 2 3 4 5))))

                                         (define (parlor sum)
                                           (let ((nums (two-numbers)))
                                             (⊦ (eq? (apply + nums) sum))
                                             nums))

                                         (parlor 7)

                                         )))

  ((test/letnondeterministic/parlor+sorted _)

   (⊦= '((1 1 5) (1 2 4) (1 3 3) (2 2 3)) 
         (letnondeterministic (? ¿ ⊦ • !)

                              (define (two-numbers)
                                (list (? '(1 2 3 4 5)) (? '(1 2 3 4 5)) (? '(1 2 3 4 5))))

                              (define (parlor sum)
                                (let ((nums (two-numbers)))
                                  (⊦ (and (eq? (apply + nums) sum) (sorted? nums <)))
                                  nums))

                              (parlor 7)

                              )))

  ((test/letnondeterministic/coin _)

   (⊦= '(((la 1 1) (la 1 2))
           ((la 1 1) (la 1 2) (la 2 1) (la 2 2) (ny 1 1))
           ((la 1 1)
            (la 1 2)
            (la 2 1)
            (la 2 2)
            (ny 1 1)
            (ny 1 2)
            (ny 2 1)
            (ny 2 2)
            (bos 1 1)
            (bos 1 2)
            (bos 2 1)
            (bos 2 2)))
         (letnondeterministic (? ¿ ⊦ • !)

                              (define (coin? x)
                                (member? x '((la 1 2) (ny 1 1) (bos 2 2))))

                              (let* ((*paths* '())
                                     (attempts '())
                                     (city (? '(la ny bos)))
                                     (store (? '(1 2)))
                                     (box (? '(1 2)))
                                     (triple (list city store box)))
                                (push! triple attempts)
                                (⊦ (coin? triple))
                                (reverse attempts)))))

  ((test/letnondeterministic/coin+cut _)

   (⊦= '(((la 1 1) (la 1 2))
           ((la 1 1) (la 1 2) (ny 1 1))
           ((la 1 1)
            (la 1 2)
            (ny 1 1)
            (bos 1 1)
            (bos 1 2)
            (bos 2 1)
            (bos 2 2)))
         (letnondeterministic (? ¿ ⊦ • !)

                              (define (coin? x)
                                (member? x '((la 1 2) (ny 1 1) (bos 2 2))))

                              (let* ((*paths* '())
                                     (attempts '())
                                     (city (? '(la ny bos)))
                                     (flag (•))
                                     (store (? '(1 2)))
                                     (_ (•))
                                     (box (? '(1 2)))
                                     (triple (list city store box)))
                                (push! triple attempts)
                                (⊦ (coin? triple))
                                (! flag)
                                (reverse attempts)))))

  ((test/letnondeterministic/graph+cycles/bfs _)

   (⊦= '((a b c a) (a b c e a) (a b d e a))
         (letnondeterministic (? ¿ ⊦ • !)

                              (define (neighbors node) ; our graph, with cycles.
                                (letassoc
                                  (node '(
                                          (a (b))
                                          (b (c d))
                                          (c (a e))
                                          (d (e))
                                          (e (a))
                                          ))
                                  (else '())))

                              #;(define (path node1 node2 seen)
                                  (let1 (hood (neighbors node1))
                                        (cond
                                          ((null? hood) (⊦))
                                          ((pair? (member node2 hood)) (list node2))
                                          (else (let1 (n (? hood)) (cons n (path n node2 (cons node1 seen))))))))

                              #;(define (path node1 node2 seen)
                                  (let1 (hood (neighbors node1))
                                        (cond
                                          ((member? node2 hood) (list node2))
                                          (else (let1 (n (? hood)) (cons n (path n node2 (cons node1 seen))))))))

                              #;(define (path node1 node2 seen)
                                  (if (member? node1 seen)
                                      (list)
                                      (let1 (n (? (neighbors node1))) 
                                            (cons n (path n node2 (cons node1 seen))))))

                              (define (path node1 node2 seen)
                                (⊦ (not (member? node1 seen)))
                                (let1 (n (? (neighbors node1)))
                                      (if (eq? n node2)
                                          (list node2)
                                          (cons n (path n node2 (cons node1 seen))))))

                              (let* ((source 'a)
                                     (p (path source 'a '())))
                                (cons source p))
                              )))

  ((test/letnondeterministic/temporal-graphs _)

   (define graph-simple `(
                          (a ((b (1 2 3))))
                          (b ((c (2 5)) (d ,ℕ)))
                          (c ((a (2 3 4 5 6)) (e ,ℕ)))
                          (d ((e (3 4 5))))
                          (e ((a ,ℕ)))
                          ))

   (define (V g) (map car g))

   (⊦= '(
           ((a b) ((a 1) (b 2)))
           ((a b) ((a 1) (b 3)))
           ((a c) ((a 1) (b 2) (c 5)))
           ((a c) ((a 1) (b 3) (c 5)))
           ((a d) ((a 1) (b 2) (d 3)))
           ((a d) ((a 1) (b 2) (d 4)))
           ((a d) ((a 1) (b 2) (d 5)))
           ((a d) ((a 1) (b 2) (d 6)))
           ((a d) ((a 1) (b 2) (d 7)))
           ((a d) ((a 1) (b 3) (d 4)))
           ((a d) ((a 1) (b 3) (d 5)))
           ((a d) ((a 1) (b 3) (d 6)))
           ((a d) ((a 1) (b 3) (d 7)))
           ((a e) ((a 1) (b 2) (c 5) (e 6)))
           ((a e) ((a 1) (b 2) (c 5) (e 7)))
           ((a e) ((a 1) (b 2) (d 3) (e 4)))
           ((a e) ((a 1) (b 2) (d 3) (e 5)))
           ((a e) ((a 1) (b 2) (d 4) (e 5)))
           ((a e) ((a 1) (b 3) (c 5) (e 6)))
           ((a e) ((a 1) (b 3) (c 5) (e 7)))
           ((a e) ((a 1) (b 3) (d 4) (e 5)))
           ((b a) ((b 1) (c 2) (a 3)))
           ((b a) ((b 1) (c 2) (a 4)))
           ((b a) ((b 1) (c 2) (a 5)))
           ((b a) ((b 1) (c 2) (a 6)))
           ((b a) ((b 1) (c 2) (e 3) (a 4)))
           ((b a) ((b 1) (c 2) (e 3) (a 5)))
           ((b a) ((b 1) (c 2) (e 3) (a 6)))
           ((b a) ((b 1) (c 2) (e 3) (a 7)))
           ((b a) ((b 1) (c 2) (e 4) (a 5)))
           ((b a) ((b 1) (c 2) (e 4) (a 6)))
           ((b a) ((b 1) (c 2) (e 4) (a 7)))
           ((b a) ((b 1) (c 2) (e 5) (a 6)))
           ((b a) ((b 1) (c 2) (e 5) (a 7)))
           ((b a) ((b 1) (c 2) (e 6) (a 7)))
           ((b a) ((b 1) (c 5) (a 6)))
           ((b a) ((b 1) (c 5) (e 6) (a 7)))
           ((b a) ((b 1) (d 2) (e 3) (a 4)))
           ((b a) ((b 1) (d 2) (e 3) (a 5)))
           ((b a) ((b 1) (d 2) (e 3) (a 6)))
           ((b a) ((b 1) (d 2) (e 3) (a 7)))
           ((b a) ((b 1) (d 2) (e 4) (a 5)))
           ((b a) ((b 1) (d 2) (e 4) (a 6)))
           ((b a) ((b 1) (d 2) (e 4) (a 7)))
           ((b a) ((b 1) (d 2) (e 5) (a 6)))
           ((b a) ((b 1) (d 2) (e 5) (a 7)))
           ((b a) ((b 1) (d 3) (e 4) (a 5)))
           ((b a) ((b 1) (d 3) (e 4) (a 6)))
           ((b a) ((b 1) (d 3) (e 4) (a 7)))
           ((b a) ((b 1) (d 3) (e 5) (a 6)))
           ((b a) ((b 1) (d 3) (e 5) (a 7)))
           ((b a) ((b 1) (d 4) (e 5) (a 6)))
           ((b a) ((b 1) (d 4) (e 5) (a 7)))
           ((b c) ((b 1) (c 2)))
           ((b c) ((b 1) (c 5)))
           ((b d) ((b 1) (d 2)))
           ((b d) ((b 1) (d 3)))
           ((b d) ((b 1) (d 4)))
           ((b d) ((b 1) (d 5)))
           ((b d) ((b 1) (d 6)))
           ((b d) ((b 1) (d 7)))
           ((b e) ((b 1) (c 2) (e 3)))
           ((b e) ((b 1) (c 2) (e 4)))
           ((b e) ((b 1) (c 2) (e 5)))
           ((b e) ((b 1) (c 2) (e 6)))
           ((b e) ((b 1) (c 2) (e 7)))
           ((b e) ((b 1) (c 5) (e 6)))
           ((b e) ((b 1) (c 5) (e 7)))
           ((b e) ((b 1) (d 2) (e 3)))
           ((b e) ((b 1) (d 2) (e 4)))
           ((b e) ((b 1) (d 2) (e 5)))
           ((b e) ((b 1) (d 3) (e 4)))
           ((b e) ((b 1) (d 3) (e 5)))
           ((b e) ((b 1) (d 4) (e 5)))
           ((c a) ((c 1) (a 2)))
           ((c a) ((c 1) (a 3)))
           ((c a) ((c 1) (a 4)))
           ((c a) ((c 1) (a 5)))
           ((c a) ((c 1) (a 6)))
           ((c a) ((c 1) (e 2) (a 3)))
           ((c a) ((c 1) (e 2) (a 4)))
           ((c a) ((c 1) (e 2) (a 5)))
           ((c a) ((c 1) (e 2) (a 6)))
           ((c a) ((c 1) (e 2) (a 7)))
           ((c a) ((c 1) (e 3) (a 4)))
           ((c a) ((c 1) (e 3) (a 5)))
           ((c a) ((c 1) (e 3) (a 6)))
           ((c a) ((c 1) (e 3) (a 7)))
           ((c a) ((c 1) (e 4) (a 5)))
           ((c a) ((c 1) (e 4) (a 6)))
           ((c a) ((c 1) (e 4) (a 7)))
           ((c a) ((c 1) (e 5) (a 6)))
           ((c a) ((c 1) (e 5) (a 7)))
           ((c a) ((c 1) (e 6) (a 7)))
           ((c b) ((c 1) (a 2) (b 3)))
           ((c d) ((c 1) (a 2) (b 3) (d 4)))
           ((c d) ((c 1) (a 2) (b 3) (d 5)))
           ((c d) ((c 1) (a 2) (b 3) (d 6)))
           ((c d) ((c 1) (a 2) (b 3) (d 7)))
           ((c e) ((c 1) (a 2) (b 3) (d 4) (e 5)))
           ((c e) ((c 1) (e 2)))
           ((c e) ((c 1) (e 3)))
           ((c e) ((c 1) (e 4)))
           ((c e) ((c 1) (e 5)))
           ((c e) ((c 1) (e 6)))
           ((c e) ((c 1) (e 7)))
           ((d a) ((d 1) (e 3) (a 4)))
           ((d a) ((d 1) (e 3) (a 5)))
           ((d a) ((d 1) (e 3) (a 6)))
           ((d a) ((d 1) (e 3) (a 7)))
           ((d a) ((d 1) (e 4) (a 5)))
           ((d a) ((d 1) (e 4) (a 6)))
           ((d a) ((d 1) (e 4) (a 7)))
           ((d a) ((d 1) (e 5) (a 6)))
           ((d a) ((d 1) (e 5) (a 7)))
           ((d e) ((d 1) (e 3)))
           ((d e) ((d 1) (e 4)))
           ((d e) ((d 1) (e 5)))
           ((e a) ((e 1) (a 2)))
           ((e a) ((e 1) (a 3)))
           ((e a) ((e 1) (a 4)))
           ((e a) ((e 1) (a 5)))
           ((e a) ((e 1) (a 6)))
           ((e a) ((e 1) (a 7)))
           ((e b) ((e 1) (a 2) (b 3)))
           ((e c) ((e 1) (a 2) (b 3) (c 5)))
           ((e d) ((e 1) (a 2) (b 3) (d 4)))
           ((e d) ((e 1) (a 2) (b 3) (d 5)))
           ((e d) ((e 1) (a 2) (b 3) (d 6)))
           ((e d) ((e 1) (a 2) (b 3) (d 7))))
         (letnondeterministic -1 (? ¿ ⊦ • !)

                              (define (path p node1 node2 seen maxlen maxt)
                                (let* ((lastpair (car p))
                                       (l (caddr lastpair))
                                       (_ (⊦ (< l (add1 maxlen))))
                                       (pair (? (letassoc (node1 graph-simple) (else '()))))
                                       (n (car pair))
                                       (_ (⊦ (not (member? n seen))))
                                       (t₁ (? (cadr pair) (λ (t) (< t maxt))))
                                       (t₀ (cadr lastpair))
                                       (_ (⊦ (> t₁ t₀))) ; simulating the fact that transit takes some time > 0.
                                       (newp (cons (list n t₁ (add1 l)) p)))
                                  (cond
                                    ((eq? n node2) (reverse newp))
                                    (else (path newp n node2 (cons node1 seen) maxlen maxt)))))

                              (let* ((vertices (V graph-simple))
                                     (source (? vertices))
                                     (destination (? vertices))
                                     (p (path (list (list source 1 1)) source destination '() 15 7)))

                                (list (list source destination) (map (λ (triple) (list (car triple) (cadr triple))) p)) ; each path
                                #;(length p) ; path length
                                #;(? (map (λ (triple) (car triple)) p)) ; vertex usage
                                #;(? (map (λ (triple) (list (car triple) (cadr triple))) p)) ; vertex visiting, wrt time.
                                #;(? (mappair (λ (r s) (list (car r) (car s))) p)) ; edge usage
                                #;(? (mappair (λ (r s) (list (car s) (- (cadr s) (cadr r)))) p)) ; vertex waiting
                                #;(list source destination) ; path "weight"
                                ))))


  )

(unittest/✓ letnondeterministic-suite)

