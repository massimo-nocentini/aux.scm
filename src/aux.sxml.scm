

(module (aux sxml) *

  (import
    scheme 
    (chicken base) 
    (chicken condition) 
    (chicken pretty-print) 
    (chicken port) 
    (chicken string) 
    (chicken syntax) 
    (chicken flonum) 
    (chicken time) 
    (chicken gc)
    (chicken module)
    srfi-1 
    srfi-19
    sxml-transforms
    spiffy 
    intarweb 
    uri-common
    matchable
    )

  (reexport matchable)

  (define highlight-version "11.11.1")

  (define (sxml-tree title body)
    (let ((maintitle (if (pair? title) (car title) title))
          (abstract (if (pair? title) (cdr title) '())))
      `((html (@ (xmlns "http://www.w3.org/1999/xhtml")
                 (xml:lang "en") 
                 (lang "en"))
              (head
                (meta (@ (name "viewport") (content "width=device-width,initial-scale=1")))
                (link (@ (rel "stylesheet") 
                         (href "https://www.w3schools.com/w3css/5/w3.css") 
                         (type "text/css")))
                (link (@ (rel "stylesheet") 
                         (href "https://fonts.googleapis.com/css?family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&family=Playfair:ital,opsz,wght@0,5..1200,300..900;1,5..1200,300..900&display=swap") 
                         (type "text/css")))
                (link (@ (rel "stylesheet") 
                         (href "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/" ,highlight-version "/styles/default.min.css") 
                         (type "text/css")))
                (style "code, pre, tt, kbd, samp, .w3-code, .w3-codespan { font-family: Monaco, Lucida Console, Roboto Mono, Ubuntu Mono, monospace; }"
                       "math { font-family: Euler Math; }"
                       "html, body, h1, h2, h3, h4, h5, h6 { font-family: Merriweather, Lucida Sans, Times New Roman, serif; }")
                (script (@ (src "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/" ,highlight-version "/highlight.min.js")))
                ,@(map (lambda (lang) 
                         `(script (@ (src "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/" ,highlight-version "/languages/" ,lang ".min.js")))) 
                    '(scheme python mathematica ocaml))
                (script "hljs.highlightAll();")
                (title ,maintitle))
              (body (@ (class "w3-content") (style "max-width:61.8%"))
                    (header (@ (class "w3-container w3-center"))
                            (h1 (b ,maintitle))
                            (p ,@abstract)
                            (small
                              (small (p ,(date->string (current-date))))
                              (a (@ (rel "license") (href "http://creativecommons.org/licenses/by-sa/4.0/"))
                                 (img (@ (alt "Creative Commons License") (style "border-width:0")
                                         (src "https://mirrors.creativecommons.org/presskit/icons/cc.svg"))))
                              (a (@ (rel "license") (href "http://creativecommons.org/licenses/by-sa/4.0/"))
                                 (img (@ (alt "Creative Commons License") (style "border-width:0")
                                         (src "https://mirrors.creativecommons.org/presskit/icons/by.svg"))))
                              (a (@ (rel "license") (href "http://creativecommons.org/licenses/by-sa/4.0/"))
                                 (img (@ (alt "Creative Commons License") (style "border-width:0")
                                         (src "https://mirrors.creativecommons.org/presskit/icons/sa.svg"))))
                              (p "This work is licensed under a "
                                 (a (@ (rel "license") (href "http://creativecommons.org/licenses/by-sa/4.0/")) 
                                    "Creative Commons Attribution-ShareAlike 4.0 International License"))))
                    (structure/toc)
                    (hr)
                    ,@body
                    (structure/citations))))))

  (define (SXML->HTML->file! tree filename)
    (with-output-to-file (conc filename ".html")
      (lambda ()
        (letrec ((sections '())
                 (citations '())
                 (sxml-handler-container (lambda (tag body) `(div (@ (class "w3-container")) ,@body)))
                 (sxml-handler-code/pre (lambda (tag body) `(pre (code (@ (class "w3-code w3-round")) ,@body))))
                 (sxml-handler-code/inline (lambda (tag body) `(code (@ (class "w3-codespan")) ,@body)))
                 (sxml-handler-code/lang (lambda (tag body)
                                           (let ((lang (car body))
                                                 (code (cdr body)))
                                             `(div (@ (class "w3-card w3-round"))
                                                   (header (@ (class "w3-container w3-border w3-round w3-light-gray w3-right")) ,lang " code")
                                                   (pre (@ (class "w3-container"))
                                                        (code (@ (class "w3-code w3-round language-" ,lang)) ,code))))))
                 (sxml-handler-code/scheme/expand (lambda (tag body)
                                                    (sxml-handler-code/scheme 'code/scheme 
                                                                              (map (lambda (expr) (strip-syntax (expand expr))) body))))
                 (sxml-handler-code/scheme (lambda (tag body)
                                             (let* ((expr (if (eq? (length body) 1) (car body) (cons 'begin body))))
                                               (sxml-handler-code/lang
                                                 'code/lang 
                                                 (list 'scheme (call-with-output-string
                                                                 (lambda (p) (pretty-print expr p))))))))
                 (sxml-handler-code/scheme/file (lambda (tag body)
                                                  (sxml-handler-code/scheme 'code/scheme 
                                                                            (list (with-input-from-file (car body) (lambda () (read)))))))
                 (sxml-handler-di (lambda (tag body)
                                    (let ((dt (car body))
                                          (dd (cdr body)))
                                      `(div (@ (class "w3-row")) 
                                            (dt (@ (class "w3-bold")) ,dt)
                                            (dd ,@dd)))))
                 (sxml-handler-center (lambda (tag body) 
                                        `(div (@ (class "w3-center")) 
                                              ,@body)))
                 (sxml-handler-structure/section (lambda (tag body)
                                                   (let* ((witness (gensym 'section))
                                                          (i (if (null? sections) 0 (caar sections)))
                                                          (nexti (add1 i)))
                                                     (set! sections (cons (list nexti witness body) sections))
                                                     `(section (@ (id ,witness)) (header (h1 ,nexti ". ",@body))))))
                 (sxml-handler-structure/toc (lambda (tag body)
                                               `(div (@ (class "w3-container"))
                                                     (header (b "Table of contents"))
                                                     (ol ,@(map (lambda (each) `(li (a (@ (href "#" ,(cadr each))) ,@(caddr each))))
                                                             (reverse sections))))))
                 (sxml-handler-structure/citations (lambda (tag body)
                                                     (if (null? citations)
                                                         '()
                                                         `((hr)
                                                           (div (@ (class "w3-container"))
                                                                (header (b "References"))
                                                                ,@(map (lambda (tuple)
                                                                         (let ((href (third tuple))
                                                                               (rest (fourth tuple)))
                                                                           `((span (@ (id ,(second tuple))) 
                                                                                   "[" ,(first tuple) "] " (a (@ (href ,href)) 
                                                                                                              ,@(if (null? rest) (list href) rest)))
                                                                             (br))))
                                                                    (reverse citations)))))))
                 (sxml-handler-cite/a (lambda (tag body) 
                                        (let* ((i (if (null? citations) 0 (caar citations)))
                                               (nexti (add1 i))
                                               (witness (gensym 'cite))
                                               (href (car body))
                                               (rest (cdr body)))
                                          (set! citations (cons (list nexti witness href rest) citations))
                                          `(cite "[" (a (@ (href "#" ,witness)) ,nexti) "]"))))
                 (sxml-handler-cite/quote (lambda (tag body) 
                                            (let ((author (car body))
                                                  (quotation (cdr body)))
                                              `(blockquote (@ (class "w3-panel w3-leftbar w3-round w3-border") (style "max-width:61.8%"))
                                                           (span (@ (style "font-size:261%;opacity:0.2")) (& "#10077"))
                                                           (br)
                                                           (i ,@quotation)
                                                           (footer (p (@ (class "w3-right-align")) ,author))))))
                 (sxml-handler-math/display (lambda (tag body) `(math (@ (display "block")) ,@body)))
                 (sxml-handler-math/frac (lambda (tag body) `(mfrac ,(car body) ,(cadr body))))
                 (sxml-handler-math/m (lambda (tag body)
                                        (let ((v (car body)))
                                          (cond
                                            ((rational? v) (sxml-handler-math/frac 'frac (list (numerator v) (denominator v))))
                                            ((number? v) `(mn ,v))
                                            ((symbol? v) `(mi ,v))
                                            ((pair? v) `(mrow ,@(map (lambda (w) (sxml-handler-math/m 'm (list w))) v)))
                                            (else `(mtext ,v)))))))
          (display "<!doctype html>")
          (SRV:send-reply
            (pre-post-order*
              (pre-post-order*
                (pre-post-order*
                  tree
                  (append `((container . ,sxml-handler-container)
                            (code/inline . ,sxml-handler-code/inline)
                            (code/lang . ,sxml-handler-code/lang)
                            (code/pre . ,sxml-handler-code/pre)
                            (code/scheme . ,sxml-handler-code/scheme)
                            (code/scheme/expand . ,sxml-handler-code/scheme/expand)
                            (code/scheme/file . ,sxml-handler-code/scheme/file)
                            (cite/a . ,sxml-handler-cite/a)
                            (cite/quote . ,sxml-handler-cite/quote)
                            (structure/section . ,sxml-handler-structure/section)
                            (displaymath . ,sxml-handler-math/display)
                            (m . ,sxml-handler-math/m)
                            (frac . ,sxml-handler-math/frac)
                            (di . ,sxml-handler-di)
                            (center . ,sxml-handler-center)
                            #;(escape *preorder* . ,(lambda (tag body) (cons tag body))))
                          alist-conv-rules*))
                (append `((structure/toc . ,sxml-handler-structure/toc)
                          (structure/citations . ,sxml-handler-structure/citations)
                          #;(escape *preorder* . ,(lambda (tag body) (cons tag body))))
                        alist-conv-rules*))
              (append `((escape *preorder* . ,(lambda (tag body) (apply string-append (map ->string body)))))
                      universal-conversion-rules*)))))))


  (define-syntax define-vhost 
    (syntax-rules () 
      ((define-vhost (name request body) (method ((p ...) b ...) ...) ...)
       (define (name continue)
         (let* ((request (current-request))
                (uri (request-uri request))
                (body (foldl (lambda (str each) (string-append str (symbol->string (car each)))) 
                             "" (if (request-has-message-body? request) (read-urlencoded-request-data request) '()))))
           (when (equal? (quote method) (request-method request))
             (match (uri-path uri)
               (('/ p ...) b ...) ...)) ...
           (continue))))))

  (define-syntax define-vhost-map 
    (syntax-rules () 
      ((define-vhost-map (host handler) ...) (vhost-map `((,host . ,handler) ...)))))

  )